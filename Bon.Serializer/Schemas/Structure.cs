namespace Bon.Serializer.Schemas;

/// <summary>
/// A structure is a unique identifier for a schema (or layout).
/// If two schemas have the same "structure", their Structure instances are equal.
/// The layout IDs are not part of the structure, but they are used to spot recursive schemas.
/// Two schemas have the same structure if they have the same schema type and if their schema
/// arguments and members have the same structure and if their members have the same IDs.
/// Structures are used to link every custom schema generated by the source generation context
/// to a layout.
/// </summary>
internal sealed class Structure(byte[] bytes)
{
    private readonly int _hash = ComputeHash(bytes);
    private readonly byte[] _bytes = bytes;

    public override bool Equals(object? obj)
    {
        return obj is Structure other && other._hash == _hash && other._bytes.SequenceEqual(_bytes);
    }

    public override int GetHashCode()
    {
        return _hash;
    }

    // Fowler–Noll–Vo hash function
    private static int ComputeHash(byte[] bytes)
    {
        const uint fnvPrime = 16777619;
        uint hash = 2166136261;

        foreach (var b in bytes)
            hash = (hash ^ b) * fnvPrime;

        return (int)hash;
    }
}
